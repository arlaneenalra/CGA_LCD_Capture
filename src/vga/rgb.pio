;
; Hunter Adams (vha3@cornell.edu)
; RGB generation for VGA driver
; mod by Bruce Land for 16 colors
; https://github.com/vha3/Hunter-Adams-RP2040-Demos/blob/master/VGA_Graphics/VGA_Graphics_Primitives/rgb.pio

; Program name
.program rgb

.define PUBLIC VGA_HSYNC_WATCH 16
.define PUBLIC VGA_VSYNC_WATCH 17

.fifo tx
.out 32 left auto 32 


   set pins, 0 				; Zero RGB pins in blanking
   pull block    			; Pull from FIFO to OSR (only once)

   mov y, osr 				; Copy value from OSR to y scratch register
   
   wait 0 gpio VGA_VSYNC_WATCH [17]
   wait 1 gpio VGA_VSYNC_WATCH [17]

.wrap_target

   wait 0 gpio VGA_HSYNC_WATCH [31]
   wait 1 gpio VGA_HSYNC_WATCH [31] 

   set x, 5 
backporch:
   set pins, 0  [31]  
   jmp x-- backporch

   set pins, 0  [6] 

   mov x, y 					; Initialize counter variable

colorout:
  out pins, 4	[4]			; Push out to pins (next pixel)
	out pins, 4	[4]			; Push out to pins (next pixel)

	out pins, 4	[4]			; Push out to pins (next pixel)
	out pins, 4	[3]			; Push out to pins (next pixel)
	jmp x-- colorout		; Stay here thru horizontal active mode

  set pins, 0
  
.wrap


% c-sdk {

static inline void rgb_program_init(PIO pio, uint sm, uint offset, uint pin) {

    // creates state machine configuration object c, sets
    // to default configurations. I believe this function is auto-generated
    // and gets a name of <program name>_program_get_default_config
    // Yes, page 40 of SDK guide
    pio_sm_config c = rgb_program_get_default_config(offset);

    // Map the state machine's SET and OUT pin group to three pins, the `pin`
    // parameter to this function is the lowest one. These groups overlap.
    sm_config_set_set_pins(&c, pin, 4);
    sm_config_set_out_pins(&c, pin, 4);

    // Set clock division
    sm_config_set_clkdiv(&c, 2) ;

    // Set this pin's GPIO function (connect PIO to the pad)
    for (int i = 0; i < 4; i++) {
      pio_gpio_init(pio, pin + i);
      gpio_set_slew_rate(pin + i, GPIO_SLEW_RATE_FAST);
    }

    // Set the pin direction to output at the PIO (3 pins)
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 4, true);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);

    // Set the state machine running (commented out, I'll start this in the C)
    // pio_sm_set_enabled(pio, sm, true);
}
%}
