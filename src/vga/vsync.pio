;
; Hunter Adams (vha3@cornell.edu)
; VSync generation for VGA driver
; https://github.com/vha3/Hunter-Adams-RP2040-Demos/blob/master/VGA_Graphics/VGA_Graphics_Primitives/vsync.pio
; http://www.tinyvga.com/vga-timing/640x400@70Hz

; Program name
.program vsync
.side_set 1 opt

; frontporch: 12  lines
; sync pulse: 2   lines
; back porch: 35  lines
; active for: 400 lines
;
; Code size could be reduced with side setting

.define PUBLIC VGA_HSYNC_WATCH 16
 
pull block                        ; Pull from FIFO to OSR (only once)
.wrap_target                      ; Program wraps to here

; ACTIVE
    mov x, osr                    ; Copy value from OSR to x scratch register
    set pins, 1

    wait 1 gpio VGA_HSYNC_WATCH [5] 

activefront:
    wait 0 gpio VGA_HSYNC_WATCH [5]  ; Wait for hsync to go high
    wait 1 gpio VGA_HSYNC_WATCH [5]  ; Wait for hsync to go high
    jmp x-- activefront           ; Remain in active mode, decrementing counter

; FRONTPORCH
    set y, 12                     ;
frontporch:
    wait 0 gpio VGA_HSYNC_WATCH [5]  ;
    wait 1 gpio VGA_HSYNC_WATCH [5]  ;
    jmp y-- frontporch            ;

; SYNC PULSE
    set pins, 0                   ; Set pin low

    wait 0 gpio VGA_HSYNC_WATCH  [5]  ; Wait for one line
    wait 1 gpio VGA_HSYNC_WATCH  [5] ;
    
    wait 0 gpio VGA_HSYNC_WATCH  [5] ; Wait for one line
    wait 1 gpio VGA_HSYNC_WATCH  [5] ;

    ; Start the back porch
    wait 0 gpio VGA_HSYNC_WATCH [5] side 1  ; Wait for hsync to go low
    wait 1 gpio VGA_HSYNC_WATCH [5]  ; Wait for hsync to go high - SIDESET REPLACEMENT HERE

; BACKPORCH
    set y, 17                     ; First part of back porch into y scratch register (and delays a cycle)
backporch:
    ; Wait for two scanlines
    wait 0 gpio VGA_HSYNC_WATCH [5]  ; 
    wait 1 gpio VGA_HSYNC_WATCH [5]  ;

    wait 0 gpio VGA_HSYNC_WATCH [5]  ; 
    wait 1 gpio VGA_HSYNC_WATCH [5]  ; 

    jmp y-- backporch             ; Remain in backporch, decrementing counter
.wrap                             ; Program wraps from here



% c-sdk {
static inline void vsync_program_init(PIO pio, uint sm, uint offset, uint pin) {

    // creates state machine configuration object c, sets
    // to default configurations. I believe this function is auto-generated
    // and gets a name of <program name>_program_get_default_config
    // Yes, page 40 of SDK guide
    pio_sm_config c = vsync_program_get_default_config(offset);

    // Map the state machine's SET pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_set_pins(&c, pin, 1);
    sm_config_set_sideset_pins(&c, pin);

    // Set clock division (div by 5 for 25 MHz state machine)
    sm_config_set_clkdiv(&c, 2) ;

    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);
    // pio_gpio_init(pio, pin+1);
    
    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);

    // Set the state machine running (commented out so can be synchronized with hsync)
    // pio_sm_set_enabled(pio, sm, true);
}
%}
